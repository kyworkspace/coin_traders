{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { handle } from 'redux-pack';\nimport { CREATE, UPDATE, FETCH, FETCH_LIST, RESET } from './actionTypes'; //서로 다른 데이터를 처리할때 같은 type의 액션을 사용할 것이므로 액션에서 포함시킨 meta의 resourceName과 리듀서의 이름이 \n//일치한 경우에만 리듀서 코드를 실행하도록 만듬\n\nexport default ((...reducerNames) => {\n  return reducerNames.reduce((apiReducers, name) => {\n    const initState = {\n      ids: [],\n      entities: {},\n      loadingState: {\n        [`${CREATE}/${name}`]: false,\n        [`${UPDATE}/${name}`]: false,\n        [`${FETCH}/${name}`]: false,\n        [`${FETCH_LIST}/${name}`]: false\n      },\n      errorState: {\n        [`${CREATE}/${name}`]: false,\n        [`${UPDATE}/${name}`]: false,\n        [`${FETCH}/${name}`]: false,\n        [`${FETCH_LIST}/${name}`]: false\n      },\n      pagination: {}\n    };\n\n    apiReducers[name] = (state = initState, action) => {\n      const {\n        type,\n        payload,\n        meta\n      } = action;\n      const {\n        resourceName,\n        key\n      } = meta || {};\n\n      if (resourceName !== name) {\n        return state;\n      }\n\n      switch (type) {\n        case UPDATE:\n        case FETCH:\n        case CREATE:\n        case FETCH_LIST:\n          {\n            return handle(state, action, {\n              start: prevState => _objectSpread(_objectSpread({}, prevState), {}, {\n                loadingState: _objectSpread(_objectSpread({}, prevState.loadingState), {}, {\n                  [`${type}/${name}`]: true\n                }),\n                errorState: _objectSpread(_objectSpread({}, prevState.errorState), {}, {\n                  [`${type}/${name}`]: false\n                })\n              }),\n              success: prevState => {\n                const {\n                  data\n                } = payload;\n\n                if (type === FETCH_LIST) {\n                  const {\n                    pageNumber,\n                    pageSize\n                  } = meta || {};\n                  const ids = data.map(entity => entity[key]);\n                  const entities = data.reduce((finalEntities, entity) => _objectSpread(_objectSpread({}, finalEntities), {}, {\n                    [entity[key]]: entity\n                  }), {});\n                  return _objectSpread(_objectSpread({}, prevState), {}, {\n                    ids,\n                    entities: _objectSpread(_objectSpread({}, prevState.entities), entities),\n                    loadingState: _objectSpread(_objectSpread({}, prevState.loadingState), {}, {\n                      [`${type}/${name}`]: false\n                    }),\n                    errorState: _objectSpread(_objectSpread({}, prevState.errorState), {}, {\n                      [`${type}/${name}`]: false\n                    }),\n                    pagination: {\n                      number: pageNumber,\n                      size: pageSize\n                    }\n                  });\n                } else {\n                  const id = data[key];\n                  return _objectSpread(_objectSpread({}, prevState), {}, {\n                    id,\n                    entities: _objectSpread(_objectSpread({}, prevState.entities), {}, {\n                      [id]: data\n                    }),\n                    loadingState: _objectSpread(_objectSpread({}, prevState.loadingState), {}, {\n                      [`${type}/${name}`]: false\n                    }),\n                    errorState: _objectSpread(_objectSpread({}, prevState.errorState), {}, {\n                      [`${type}/${name}`]: false\n                    })\n                  });\n                }\n              },\n              failure: prevState => {\n                const {\n                  errorMessage\n                } = payload.response ? payload.response.data : {};\n                return _objectSpread(_objectSpread({}, prevState), {}, {\n                  loadingState: _objectSpread(_objectSpread({}, prevState.loadingState), {}, {\n                    [`${type}/${name}`]: false\n                  }),\n                  errorState: _objectSpread(_objectSpread({}, prevState.errorState), {}, {\n                    [`${type}/${name}`]: errorMessage || true\n                  })\n                });\n              }\n            });\n          }\n\n        case RESET:\n          return initState;\n\n        default:\n          return state;\n      }\n    };\n\n    return apiReducers;\n  }, {});\n});","map":{"version":3,"sources":["C:/React/coin_traders/src/api-redux-pack/createReducers.js"],"names":["handle","CREATE","UPDATE","FETCH","FETCH_LIST","RESET","reducerNames","reduce","apiReducers","name","initState","ids","entities","loadingState","errorState","pagination","state","action","type","payload","meta","resourceName","key","start","prevState","success","data","pageNumber","pageSize","map","entity","finalEntities","number","size","id","failure","errorMessage","response"],"mappings":"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","sourcesContent":["import {handle} from 'redux-pack';\r\nimport { CREATE,UPDATE,FETCH,FETCH_LIST,RESET } from './actionTypes';\r\n//서로 다른 데이터를 처리할때 같은 type의 액션을 사용할 것이므로 액션에서 포함시킨 meta의 resourceName과 리듀서의 이름이 \r\n//일치한 경우에만 리듀서 코드를 실행하도록 만듬\r\nexport default (...reducerNames)=>{\r\n    return reducerNames.reduce((apiReducers,name)=>{\r\n        const initState = {\r\n            ids : [],\r\n            entities : {},\r\n            loadingState : {\r\n                [`${CREATE}/${name}`] : false,\r\n                [`${UPDATE}/${name}`] : false,\r\n                [`${FETCH}/${name}`] : false,\r\n                [`${FETCH_LIST}/${name}`] : false,\r\n            },\r\n            errorState : {\r\n                [`${CREATE}/${name}`] : false,\r\n                [`${UPDATE}/${name}`] : false,\r\n                [`${FETCH}/${name}`] : false,\r\n                [`${FETCH_LIST}/${name}`] : false,\r\n            },\r\n            pagination : {},\r\n        };\r\n        apiReducers[name] = (state = initState, action)=>{\r\n            const {type, payload,meta} = action;\r\n            const {resourceName,key} = meta || {};\r\n\r\n            if(resourceName !== name){\r\n                return state;\r\n            }\r\n\r\n            switch(type){\r\n                case UPDATE:\r\n                case FETCH:\r\n                case CREATE :\r\n                case FETCH_LIST :{\r\n                    return handle(state,action, {\r\n                        start : prevState => ({\r\n                            ...prevState,\r\n                            loadingState:{\r\n                                ...prevState.loadingState,\r\n                                [`${type}/${name}`] : true,\r\n                            },\r\n                            errorState : {\r\n                                ...prevState.errorState,\r\n                                [`${type}/${name}`] : false,\r\n                            }\r\n                        }),\r\n                        success : prevState =>{\r\n                            const {data} = payload;\r\n                            if(type === FETCH_LIST){\r\n                                const {pageNumber,pageSize} = meta ||{};\r\n                                const ids = data.map(entity=>entity[key]);\r\n                                const entities = data.reduce(\r\n                                    (finalEntities,entity)=>({\r\n                                        ...finalEntities,\r\n                                        [entity[key]] : entity\r\n                                }),\r\n                                {}\r\n                                );\r\n\r\n                                return {\r\n                                    ...prevState,\r\n                                    ids,\r\n                                    entities : {...prevState.entities,...entities},\r\n                                    loadingState : {\r\n                                        ...prevState.loadingState,\r\n                                        [`${type}/${name}`] : false,\r\n                                    },\r\n                                    errorState : {\r\n                                        ...prevState.errorState,\r\n                                        [`${type}/${name}`] : false,\r\n                                    },\r\n                                    pagination : {\r\n                                        number : pageNumber,\r\n                                        size : pageSize,\r\n                                    },\r\n                                }\r\n                            }else{\r\n                                const id = data[key];\r\n                                return {\r\n                                    ...prevState,\r\n                                    id,\r\n                                    entities : {...prevState.entities,[id] : data},\r\n                                    loadingState : {\r\n                                        ...prevState.loadingState,\r\n                                        [`${type}/${name}`] : false,\r\n                                    },\r\n                                    errorState : {\r\n                                        ...prevState.errorState,\r\n                                        [`${type}/${name}`] : false,\r\n                                    },\r\n                                }\r\n                            }\r\n                            \r\n                        },\r\n                        failure : prevState =>{\r\n                            const {errorMessage} = payload.response ? payload.response.data : {};\r\n                            return {\r\n                                ...prevState,\r\n                                loadingState : {\r\n                                    ...prevState.loadingState,\r\n                                    [`${type}/${name}`] : false,\r\n                                },\r\n                                errorState : {\r\n                                    ...prevState.errorState,\r\n                                    [`${type}/${name}`] : errorMessage||true,\r\n                                },\r\n                            }\r\n                        }\r\n                    })\r\n                }\r\n                case RESET : return initState;\r\n                default : return state;\r\n            }\r\n        }\r\n        return apiReducers;\r\n    },{})\r\n}"]},"metadata":{},"sourceType":"module"}