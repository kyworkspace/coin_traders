{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport reducers from '../reducers';\nimport thunk from 'redux-thunk';\nimport notificationEffects from '../middlewares/notificationEffects'; //import {SET_TRANSACTION_LIST} from '../actions/transactionActions';\n\nimport transactionEffects from '../middlewares/transactionEffects';\nimport searchFilterEffects from '../middlewares/searchFilterEffects';\nimport routerEffecs from '../middlewares/routerEffects'; //redux-pack\n\nimport { middleware as reduxPackMiddleware } from 'redux-pack'; // const customMiddleware = store =>nextRunner => action =>{\n//     console.log('미들웨어1 액션객체',action); //nextRunner 이전 작업\n//     console.log('미들웨어1 실행전',store.getState()); //nextRunner 이전 작업 2\n//     const result = nextRunner(action);;\n//     console.log('미들웨어1 실행 후',store.getState()); //nextRunner 이후\n//     return result;\n// }\n// const customMiddleware1 = () => nextRunner => action =>{\n//     if(action.type === SET_TRANSACTION_LIST){\n//         return nextRunner({\n//             ...action,\n//             payload :[{\n//                 id : 0,\n//                 code : 'DOIT',\n//                 name : '두잇코인',\n//                 totalPrice : 100000,\n//                 currentPrice : 1111,\n//                 dateTime : '현재시간',\n//             }]\n//         })\n//     }\n//     return nextRunner(action);\n// }\n// const customMiddleware2 = store =>nextRunner => action =>{\n//     console.log('미들웨어2 액션 전달됨',action); //nextRunner 이전 작업\n//     console.log('미들웨어2 실행전',store.getState()); //nextRunner 이전 작업 2\n//     const result = nextRunner(action);;\n//     console.log('미들웨어 2 실행후',store.getState()); //nextRunner 이후\n//     return result;\n// }\n// export default initStates =>createStore(\n//     combineReducers(reducers),\n//     initStates,\n//     composeWithDevTools(),\n// )\n\nexport default (initStates => createStore(combineReducers(reducers), initStates, composeWithDevTools(applyMiddleware(thunk, reduxPackMiddleware, notificationEffects, transactionEffects, searchFilterEffects, routerEffecs))));","map":{"version":3,"sources":["C:/React/coin_traders/src/store/configureStore.js"],"names":["createStore","combineReducers","applyMiddleware","composeWithDevTools","reducers","thunk","notificationEffects","transactionEffects","searchFilterEffects","routerEffecs","middleware","reduxPackMiddleware","initStates"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,eAArB,EAAsCC,eAAtC,QAA4D,OAA5D;AACA,SAAQC,mBAAR,QAAkC,0BAAlC;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,mBAAP,MAAgC,oCAAhC,C,CACA;;AACA,OAAOC,kBAAP,MAA+B,mCAA/B;AACA,OAAOC,mBAAP,MAAgC,oCAAhC;AACA,OAAOC,YAAP,MAAyB,8BAAzB,C,CACA;;AACA,SAAQC,UAAU,IAAIC,mBAAtB,QAAgD,YAAhD,C,CAGA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA,gBAAeC,UAAU,IAAGZ,WAAW,CACnCC,eAAe,CAACG,QAAD,CADoB,EAEnCQ,UAFmC,EAGnCT,mBAAmB,CAACD,eAAe,CAACG,KAAD,EAAOM,mBAAP,EAA2BL,mBAA3B,EAA+CC,kBAA/C,EAAkEC,mBAAlE,EAAsFC,YAAtF,CAAhB,CAHgB,CAAvC","sourcesContent":["import {createStore, combineReducers, applyMiddleware} from 'redux';\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport reducers from '../reducers';\r\nimport thunk from 'redux-thunk';\r\nimport notificationEffects from '../middlewares/notificationEffects'\r\n//import {SET_TRANSACTION_LIST} from '../actions/transactionActions';\r\nimport transactionEffects from '../middlewares/transactionEffects';\r\nimport searchFilterEffects from '../middlewares/searchFilterEffects';\r\nimport routerEffecs from '../middlewares/routerEffects'\r\n//redux-pack\r\nimport {middleware as reduxPackMiddleware} from 'redux-pack';\r\n\r\n\r\n// const customMiddleware = store =>nextRunner => action =>{\r\n//     console.log('미들웨어1 액션객체',action); //nextRunner 이전 작업\r\n//     console.log('미들웨어1 실행전',store.getState()); //nextRunner 이전 작업 2\r\n\r\n//     const result = nextRunner(action);;\r\n\r\n//     console.log('미들웨어1 실행 후',store.getState()); //nextRunner 이후\r\n//     return result;\r\n// }\r\n\r\n// const customMiddleware1 = () => nextRunner => action =>{\r\n//     if(action.type === SET_TRANSACTION_LIST){\r\n//         return nextRunner({\r\n//             ...action,\r\n//             payload :[{\r\n//                 id : 0,\r\n//                 code : 'DOIT',\r\n//                 name : '두잇코인',\r\n//                 totalPrice : 100000,\r\n//                 currentPrice : 1111,\r\n//                 dateTime : '현재시간',\r\n//             }]\r\n//         })\r\n//     }\r\n//     return nextRunner(action);\r\n// }\r\n\r\n// const customMiddleware2 = store =>nextRunner => action =>{\r\n//     console.log('미들웨어2 액션 전달됨',action); //nextRunner 이전 작업\r\n//     console.log('미들웨어2 실행전',store.getState()); //nextRunner 이전 작업 2\r\n\r\n//     const result = nextRunner(action);;\r\n\r\n//     console.log('미들웨어 2 실행후',store.getState()); //nextRunner 이후\r\n//     return result;\r\n// }\r\n\r\n// export default initStates =>createStore(\r\n//     combineReducers(reducers),\r\n//     initStates,\r\n//     composeWithDevTools(),\r\n// )\r\n\r\nexport default initStates =>createStore(\r\n    combineReducers(reducers),\r\n    initStates,\r\n    composeWithDevTools(applyMiddleware(thunk,reduxPackMiddleware,notificationEffects,transactionEffects,searchFilterEffects,routerEffecs))\r\n    ,\r\n)"]},"metadata":{},"sourceType":"module"}