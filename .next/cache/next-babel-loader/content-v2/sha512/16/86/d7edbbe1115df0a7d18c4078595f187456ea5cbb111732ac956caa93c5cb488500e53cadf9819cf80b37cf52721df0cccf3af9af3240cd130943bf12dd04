{"ast":null,"code":"// import {\n// FETCH_TRANSACTION_LIST,\n// CREATE_TRANSACTION,\n// } from '../actions/transactionPackActions';\n// import {createSelector} from 'reselect'\n// export const transactionsSelector = state => state.transactions; \n// //스토어데이터에서 거래 정보를 추출하는 셀렉터\n// // export const transactionListSelector = (state) =>{\n// //             //그래프 DB 구조의 거래목록자료를 원본배열로 변환하는 셀렉터.\n// //             const {ids,entities} = transactionsSelector(state);\n// //             return ids.map((id)=>entities[id]);\n// //         }\n// export const transactionListSelector = createSelector(\n//     [transactionsSelector],transactions=>{\n//         const {ids,entities} = transactions;\n//         return ids.map(id=>entities[id]);\n//     }\n// )\n// //반복된 구조를 반환하는 경우 reselector에 저장시켜둬서 언제든 빠르게 찾아낼수 있다.\n// export const loadingStateSelector = state => transactionsSelector(state).loadingState;\n// //거래 정보의 전체 로딩 정보 객체를 추출하는 셀렉터\n// export const transactionListLoadingStateSelector = state => loadingStateSelector(state)[FETCH_TRANSACTION_LIST];\n// //전체 거래 목록요청의 로딩상태만 추출하는 셀렉터\n// export const transactionCreateLoadingStateSelector = state => loadingStateSelector(state)[CREATE_TRANSACTION];\n// //거래 생성 요청의 로딩상태만을 추출하는 셀렉터\nimport createSelectors from '../api-redux-pack/createSelectors';\n\nconst _createSelectors = createSelectors('transactions'),\n      transactionsSelector = _createSelectors.resourceSelector,\n      transactionListSelector = _createSelectors.collectionSelector,\n      transactionListLoadingStateSelector = _createSelectors.collectionLoadingStateSelector,\n      transactionCreateLoadingStateSelector = _createSelectors.createLoadingStateSelector,\n      paginationSelector = _createSelectors.paginationSelector;\n\nexport { transactionsSelector, transactionListSelector, transactionListLoadingStateSelector, transactionCreateLoadingStateSelector, paginationSelector };","map":{"version":3,"sources":["C:/React/coin_traders/src/selectors/transactionSelectors.js"],"names":["createSelectors","transactionsSelector","resourceSelector","transactionListSelector","collectionSelector","transactionListLoadingStateSelector","collectionLoadingStateSelector","transactionCreateLoadingStateSelector","createLoadingStateSelector","paginationSelector"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA,OAAOA,eAAP,MAA4B,mCAA5B;;yBAQIA,eAAe,CAAC,cAAD,C;MALIC,oB,oBAAnBC,gB;MACqBC,uB,oBAArBC,kB;MACiCC,mC,oBAAjCC,8B;MAC6BC,qC,oBAA7BC,0B;MACAC,kB,oBAAAA,kB","sourcesContent":["// import {\r\n// FETCH_TRANSACTION_LIST,\r\n// CREATE_TRANSACTION,\r\n// } from '../actions/transactionPackActions';\r\n// import {createSelector} from 'reselect'\r\n\r\n\r\n// export const transactionsSelector = state => state.transactions; \r\n// //스토어데이터에서 거래 정보를 추출하는 셀렉터\r\n\r\n// // export const transactionListSelector = (state) =>{\r\n// //             //그래프 DB 구조의 거래목록자료를 원본배열로 변환하는 셀렉터.\r\n// //             const {ids,entities} = transactionsSelector(state);\r\n// //             return ids.map((id)=>entities[id]);\r\n// //         }\r\n\r\n// export const transactionListSelector = createSelector(\r\n//     [transactionsSelector],transactions=>{\r\n//         const {ids,entities} = transactions;\r\n//         return ids.map(id=>entities[id]);\r\n//     }\r\n// )\r\n\r\n// //반복된 구조를 반환하는 경우 reselector에 저장시켜둬서 언제든 빠르게 찾아낼수 있다.\r\n\r\n// export const loadingStateSelector = state => transactionsSelector(state).loadingState;\r\n// //거래 정보의 전체 로딩 정보 객체를 추출하는 셀렉터\r\n\r\n// export const transactionListLoadingStateSelector = state => loadingStateSelector(state)[FETCH_TRANSACTION_LIST];\r\n// //전체 거래 목록요청의 로딩상태만 추출하는 셀렉터\r\n\r\n// export const transactionCreateLoadingStateSelector = state => loadingStateSelector(state)[CREATE_TRANSACTION];\r\n// //거래 생성 요청의 로딩상태만을 추출하는 셀렉터\r\n\r\nimport createSelectors from '../api-redux-pack/createSelectors';\r\n\r\nexport const {\r\n    resourceSelector : transactionsSelector,\r\n    collectionSelector : transactionListSelector,\r\n    collectionLoadingStateSelector : transactionListLoadingStateSelector,\r\n    createLoadingStateSelector : transactionCreateLoadingStateSelector,\r\n    paginationSelector,\r\n} = createSelectors('transactions');"]},"metadata":{},"sourceType":"module"}