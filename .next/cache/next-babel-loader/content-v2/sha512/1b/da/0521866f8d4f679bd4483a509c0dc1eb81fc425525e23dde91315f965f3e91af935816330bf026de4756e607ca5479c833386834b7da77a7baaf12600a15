{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { FETCH_LIST, CREATE, UPDATE, FETCH, RESET } from './actionTypes';\nimport Api from '../Api';\nexport default ((resourceName, key = 'id') => ({\n  collection: (params = {}, meta = {}) => ({\n    type: FETCH_LIST,\n    promise: Api.get(resourceName, {\n      params\n    }),\n    meta: _objectSpread(_objectSpread({}, meta), {}, {\n      key,\n      resourceName\n    })\n  }),\n  member: (id, params = {}, meta = {}) => ({\n    type: FETCH,\n    promise: Api.get(`${resourceName}/${id}`, {\n      params\n    }),\n    meta: _objectSpread(_objectSpread({}, meta), {}, {\n      key,\n      resourceName\n    })\n  }),\n  create: (data, params = {}, meta = {}) => ({\n    type: CREATE,\n    promise: Api.post(resourceName, data, {\n      params\n    }),\n    meta: _objectSpread(_objectSpread({}, meta), {}, {\n      key,\n      resourceName\n    })\n  }),\n  update: (id, data, params = {}, meta = {}) => ({\n    type: UPDATE,\n    promise: Api.get(`${resourceName}/${id}`, data, {\n      params\n    }),\n    meta: _objectSpread(_objectSpread({}, meta), {}, {\n      key,\n      resourceName\n    })\n  }),\n  reset: () => ({\n    type: RESET,\n    meta: {\n      resourceName\n    }\n  })\n}));","map":{"version":3,"sources":["C:/React/coin_traders/src/api-redux-pack/createActions.js"],"names":["FETCH_LIST","CREATE","UPDATE","FETCH","RESET","Api","resourceName","key","collection","params","meta","type","promise","get","member","id","create","data","post","update","reset"],"mappings":";;;;;;AAAA,SAAQA,UAAR,EAAmBC,MAAnB,EAA0BC,MAA1B,EAAiCC,KAAjC,EAAuCC,KAAvC,QAAmD,eAAnD;AACA,OAAOC,GAAP,MAAgB,QAAhB;AAEA,gBAAe,CAACC,YAAD,EAAeC,GAAG,GAAG,IAArB,MAA8B;AACzCC,EAAAA,UAAU,EAAG,CAACC,MAAM,GAAC,EAAR,EAAYC,IAAI,GAAC,EAAjB,MAAyB;AAClCC,IAAAA,IAAI,EAAGX,UAD2B;AAElCY,IAAAA,OAAO,EAAGP,GAAG,CAACQ,GAAJ,CAAQP,YAAR,EAAqB;AAACG,MAAAA;AAAD,KAArB,CAFwB;AAGlCC,IAAAA,IAAI,kCACGA,IADH;AAEAH,MAAAA,GAFA;AAGAD,MAAAA;AAHA;AAH8B,GAAzB,CAD4B;AAUzCQ,EAAAA,MAAM,EAAG,CAACC,EAAD,EAAIN,MAAM,GAAC,EAAX,EAAcC,IAAI,GAAC,EAAnB,MAAyB;AAC9BC,IAAAA,IAAI,EAAGR,KADuB;AAE9BS,IAAAA,OAAO,EAAGP,GAAG,CAACQ,GAAJ,CAAS,GAAEP,YAAa,IAAGS,EAAG,EAA9B,EAAgC;AAACN,MAAAA;AAAD,KAAhC,CAFoB;AAG9BC,IAAAA,IAAI,kCACGA,IADH;AAEAH,MAAAA,GAFA;AAGAD,MAAAA;AAHA;AAH0B,GAAzB,CAVgC;AAmBzCU,EAAAA,MAAM,EAAG,CAACC,IAAD,EAAMR,MAAM,GAAC,EAAb,EAAgBC,IAAI,GAAC,EAArB,MAA2B;AAChCC,IAAAA,IAAI,EAAGV,MADyB;AAEhCW,IAAAA,OAAO,EAAGP,GAAG,CAACa,IAAJ,CAASZ,YAAT,EAAsBW,IAAtB,EAA2B;AAACR,MAAAA;AAAD,KAA3B,CAFsB;AAGhCC,IAAAA,IAAI,kCACGA,IADH;AAEAH,MAAAA,GAFA;AAGAD,MAAAA;AAHA;AAH4B,GAA3B,CAnBgC;AA4BzCa,EAAAA,MAAM,EAAG,CAACJ,EAAD,EAAIE,IAAJ,EAASR,MAAM,GAAC,EAAhB,EAAmBC,IAAI,GAAC,EAAxB,MAA8B;AACnCC,IAAAA,IAAI,EAAGT,MAD4B;AAEnCU,IAAAA,OAAO,EAAGP,GAAG,CAACQ,GAAJ,CAAS,GAAEP,YAAa,IAAGS,EAAG,EAA9B,EAAgCE,IAAhC,EAAqC;AAACR,MAAAA;AAAD,KAArC,CAFyB;AAGnCC,IAAAA,IAAI,kCACGA,IADH;AAEAH,MAAAA,GAFA;AAGAD,MAAAA;AAHA;AAH+B,GAA9B,CA5BgC;AAqCzCc,EAAAA,KAAK,EAAG,OAAK;AACTT,IAAAA,IAAI,EAAGP,KADE;AAETM,IAAAA,IAAI,EAAG;AAACJ,MAAAA;AAAD;AAFE,GAAL;AArCiC,CAA9B,CAAf","sourcesContent":["import {FETCH_LIST,CREATE,UPDATE,FETCH,RESET} from './actionTypes';\r\nimport Api from '../Api';\r\n\r\nexport default (resourceName, key = 'id') =>({\r\n    collection : (params={}, meta={}) => ({\r\n        type : FETCH_LIST,\r\n        promise : Api.get(resourceName,{params}),\r\n        meta : {\r\n            ...meta,\r\n            key,\r\n            resourceName,\r\n        }\r\n    }),\r\n    member : (id,params={},meta={})=>({\r\n        type : FETCH,\r\n        promise : Api.get(`${resourceName}/${id}`,{params}),\r\n        meta : {\r\n            ...meta,\r\n            key,\r\n            resourceName,\r\n        }\r\n    }),\r\n    create : (data,params={},meta={})=>({\r\n        type : CREATE,\r\n        promise : Api.post(resourceName,data,{params}),\r\n        meta : {\r\n            ...meta,\r\n            key,\r\n            resourceName\r\n        }\r\n    }),\r\n    update : (id,data,params={},meta={})=>({\r\n        type : UPDATE,\r\n        promise : Api.get(`${resourceName}/${id}`,data,{params}),\r\n        meta : {\r\n            ...meta,\r\n            key,\r\n            resourceName,\r\n        }\r\n    }),\r\n    reset : ()=>({\r\n        type : RESET,\r\n        meta : {resourceName}\r\n    })\r\n})"]},"metadata":{},"sourceType":"module"}