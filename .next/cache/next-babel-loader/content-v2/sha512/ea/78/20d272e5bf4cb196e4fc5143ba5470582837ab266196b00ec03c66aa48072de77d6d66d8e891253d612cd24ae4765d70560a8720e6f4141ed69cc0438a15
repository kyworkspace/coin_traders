{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Api from '../Api';\nimport createActions from '../api-redux-pack/createActions';\nexport const FETCH_TRANSACTION_LIST = 'transaction/FETCH_TRANSACTION_LIST';\nexport const CREATE_TRANSACTION = 'transaction/CREATE_TRANSACTION';\n\nconst _createActions = createActions('transactions'),\n      collection = _createActions.collection,\n      create = _createActions.create,\n      reset = _createActions.reset;\n\nexport const resetTransactionList = reset;\nconst PAGE_SIZE = 10; // export function requestTransactionList(params,_page=1){\n//     return {\n//         type : FETCH_TRANSACTION_LIST,\n//         promise : Api.get('/transactions',{params:{...params,_page,_limit : PAGE_SIZE}}),\n//         meta :{\n//             pageNumber : _page,\n//             pageSize : PAGE_SIZE,\n//             notification : {\n//                 success : \"거래 목록을 최신정보로 업데이트 하였습니다.\",\n//                 error : '거래목록을 갱신하는 중에 문제가 발생하였습니다.'\n//             }\n//         }\n//     }\n// }\n//API 호출 방식으로 교체\n\nexport function requestTransactionList(params, _page = 1) {\n  const meta = {\n    pageNumber: _page,\n    pageSize: PAGE_SIZE,\n    notification: {\n      success: \"거래 목록을 최신정보로 업데이트 하였습니다. TransactionPackAction\",\n      error: '거래목록을 갱신하는 중에 문제가 발생하였습니다.'\n    }\n  };\n  return collection(_objectSpread(_objectSpread({}, params), {}, {\n    _page,\n    _limit: PAGE_SIZE\n  }), meta);\n} // export function createTransaction(data,onComplete){\n//     return {\n//         type : CREATE_TRANSACTION,\n//         promise : Api.post('/transactions',data),\n//         meta : {\n//             onSuccess : onComplete,\n//             notification : {\n//                 success : '거래가 성공적으로 완료되었습니다.',\n//             }\n//         }\n//     }\n// }\n\nexport function createTransaction(data, onComplete) {\n  const meta = {\n    onSuccess: onComplete,\n    notification: {\n      success: '거래가 성공적으로 완료되었습니다.'\n    }\n  };\n  return create(data, {}, meta);\n}","map":{"version":3,"sources":["C:/React/coin_traders/src/actions/transactionPackActions.js"],"names":["Api","createActions","FETCH_TRANSACTION_LIST","CREATE_TRANSACTION","collection","create","reset","resetTransactionList","PAGE_SIZE","requestTransactionList","params","_page","meta","pageNumber","pageSize","notification","success","error","_limit","createTransaction","data","onComplete","onSuccess"],"mappings":";;;;;;AAAA,OAAOA,GAAP,MAAgB,QAAhB;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AAGA,OAAO,MAAMC,sBAAsB,GAAG,oCAA/B;AACP,OAAO,MAAMC,kBAAkB,GAAG,gCAA3B;;uBAC+BF,aAAa,CAAC,cAAD,C;MAA3CG,U,kBAAAA,U;MAAYC,M,kBAAAA,M;MAAQC,K,kBAAAA,K;;AAE5B,OAAO,MAAMC,oBAAoB,GAAGD,KAA7B;AAEP,MAAME,SAAS,GAAG,EAAlB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,sBAAT,CAAgCC,MAAhC,EAAuCC,KAAK,GAAC,CAA7C,EAA+C;AAClD,QAAMC,IAAI,GAAG;AACTC,IAAAA,UAAU,EAAGF,KADJ;AAETG,IAAAA,QAAQ,EAAGN,SAFF;AAGTO,IAAAA,YAAY,EAAG;AACXC,MAAAA,OAAO,EAAG,gDADC;AAEPC,MAAAA,KAAK,EAAG;AAFD;AAHN,GAAb;AAQA,SAAOb,UAAU,iCACVM,MADU;AAEbC,IAAAA,KAFa;AAGbO,IAAAA,MAAM,EAAGV;AAHI,MAIfI,IAJe,CAAjB;AAKH,C,CAED;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASO,iBAAT,CAA2BC,IAA3B,EAAgCC,UAAhC,EAA2C;AAC9C,QAAMT,IAAI,GAAG;AACTU,IAAAA,SAAS,EAAGD,UADH;AAETN,IAAAA,YAAY,EAAG;AACXC,MAAAA,OAAO,EAAG;AADC;AAFN,GAAb;AAMA,SAAOX,MAAM,CAACe,IAAD,EAAM,EAAN,EAASR,IAAT,CAAb;AACH","sourcesContent":["import Api from '../Api';\r\nimport createActions from '../api-redux-pack/createActions';\r\n\r\n\r\nexport const FETCH_TRANSACTION_LIST = 'transaction/FETCH_TRANSACTION_LIST';\r\nexport const CREATE_TRANSACTION = 'transaction/CREATE_TRANSACTION';\r\nconst { collection, create, reset } = createActions('transactions');\r\n\r\nexport const resetTransactionList = reset;\r\n\r\nconst PAGE_SIZE = 10;\r\n\r\n// export function requestTransactionList(params,_page=1){\r\n//     return {\r\n//         type : FETCH_TRANSACTION_LIST,\r\n//         promise : Api.get('/transactions',{params:{...params,_page,_limit : PAGE_SIZE}}),\r\n//         meta :{\r\n//             pageNumber : _page,\r\n//             pageSize : PAGE_SIZE,\r\n//             notification : {\r\n//                 success : \"거래 목록을 최신정보로 업데이트 하였습니다.\",\r\n//                 error : '거래목록을 갱신하는 중에 문제가 발생하였습니다.'\r\n//             }\r\n//         }\r\n//     }\r\n// }\r\n//API 호출 방식으로 교체\r\nexport function requestTransactionList(params,_page=1){\r\n    const meta = {\r\n        pageNumber : _page,\r\n        pageSize : PAGE_SIZE,\r\n        notification : {\r\n            success : \"거래 목록을 최신정보로 업데이트 하였습니다. TransactionPackAction\",\r\n                error : '거래목록을 갱신하는 중에 문제가 발생하였습니다.'\r\n        }\r\n    }\r\n    return collection({\r\n        ...params,\r\n        _page,\r\n        _limit : PAGE_SIZE\r\n    },meta)\r\n}\r\n\r\n// export function createTransaction(data,onComplete){\r\n    \r\n//     return {\r\n//         type : CREATE_TRANSACTION,\r\n//         promise : Api.post('/transactions',data),\r\n//         meta : {\r\n//             onSuccess : onComplete,\r\n//             notification : {\r\n//                 success : '거래가 성공적으로 완료되었습니다.',\r\n//             }\r\n//         }\r\n//     }\r\n// }\r\n\r\nexport function createTransaction(data,onComplete){\r\n    const meta = {\r\n        onSuccess : onComplete,\r\n        notification : {\r\n            success : '거래가 성공적으로 완료되었습니다.',\r\n        }\r\n    }\r\n    return create(data,{},meta);\r\n}"]},"metadata":{},"sourceType":"module"}