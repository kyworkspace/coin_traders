{"ast":null,"code":"// import {\n// FETCH_TRANSACTION_LIST,\n// CREATE_TRANSACTION,\n// } from '../actions/transactionPackActions';\n// import {createSelector} from 'reselect'\n// export const transactionsSelector = state => state.transactions; \n// //스토어데이터에서 거래 정보를 추출하는 셀렉터\n// // export const transactionListSelector = (state) =>{\n// //             //그래프 DB 구조의 거래목록자료를 원본배열로 변환하는 셀렉터.\n// //             const {ids,entities} = transactionsSelector(state);\n// //             return ids.map((id)=>entities[id]);\n// //         }\n// export const transactionListSelector = createSelector(\n//     [transactionsSelector],transactions=>{\n//         const {ids,entities} = transactions;\n//         return ids.map(id=>entities[id]);\n//     }\n// )\n// //반복된 구조를 반환하는 경우 reselector에 저장시켜둬서 언제든 빠르게 찾아낼수 있다.\n// export const loadingStateSelector = state => transactionsSelector(state).loadingState;\n// //거래 정보의 전체 로딩 정보 객체를 추출하는 셀렉터\n// export const transactionListLoadingStateSelector = state => loadingStateSelector(state)[FETCH_TRANSACTION_LIST];\n// //전체 거래 목록요청의 로딩상태만 추출하는 셀렉터\n// export const transactionCreateLoadingStateSelector = state => loadingStateSelector(state)[CREATE_TRANSACTION];\n// //거래 생성 요청의 로딩상태만을 추출하는 셀렉터\nimport createSelectors from '../api-redux-pack/createSelectors';\nexport const {\n  resourceSelector: transactionsSelector,\n  collectionSelector: transactionListSelector,\n  collectionLoadingStateSelector: transactionListLoadingStateSelector,\n  createLoadingStateSelector: transactionCreateLoadingStateSelector,\n  paginationSelector\n} = createSelectors('transactions');","map":null,"metadata":{},"sourceType":"module"}