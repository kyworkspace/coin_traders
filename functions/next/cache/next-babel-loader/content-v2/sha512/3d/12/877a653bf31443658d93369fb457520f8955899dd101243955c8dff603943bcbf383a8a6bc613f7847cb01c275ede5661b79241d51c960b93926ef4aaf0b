{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\n\nconst _React$createContext = /*#__PURE__*/React.createContext({}),\n      Provider = _React$createContext.Provider,\n      Consumer = _React$createContext.Consumer;\n\nclass FormProvider extends React.PureComponent {\n  static getDerivedStateFromProps({\n    initValues\n  }, prevState) {\n    const values = initValues !== prevState.initValues ? initValues : prevState.values;\n    return {\n      initValues,\n      values,\n      error: {}\n    };\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.reset = this.reset.bind(this);\n    this.validate = this.validate.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(e) {\n    const _this$state = this.state,\n          values = _this$state.values,\n          error = _this$state.error;\n    e.preventDefault(); //뭐임?\n\n    if (Object.values(error).length === 0) {\n      this.props.onSubmit(values);\n    }\n  }\n\n  onChange(name, updatedValue) {\n    this.validate(this.state.values);\n    this.setState(({\n      values\n    }) => ({\n      values: _objectSpread(_objectSpread({}, values), {}, {\n        [name]: updatedValue\n      })\n    }));\n  }\n\n  reset() {\n    this.setState({\n      values: {}\n    });\n  }\n\n  validate(values) {\n    const validate = this.props.validate;\n\n    if (!validate) {\n      return;\n    }\n\n    const errors = this.props.validate(values);\n    this.setState({\n      errors\n    });\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          values = _this$state2.values,\n          errors = _this$state2.errors;\n    return /*#__PURE__*/_jsx(Provider, {\n      value: {\n        errors,\n        values,\n        onChange: this.onChange,\n        reset: this.reset\n      },\n      children: /*#__PURE__*/_jsx(\"form\", {\n        onSubmit: this.handleSubmit,\n        children: this.props.children\n      })\n    });\n  }\n\n}\n\n_defineProperty(FormProvider, \"Consumer\", Consumer);\n\nFormProvider.defaultProps = {\n  initValues: {},\n  validate: () => ({}),\n  onChange: () => ({}),\n  handleSubmit: () => ({}),\n  reset: () => ({})\n};\nexport default FormProvider;","map":null,"metadata":{},"sourceType":"module"}