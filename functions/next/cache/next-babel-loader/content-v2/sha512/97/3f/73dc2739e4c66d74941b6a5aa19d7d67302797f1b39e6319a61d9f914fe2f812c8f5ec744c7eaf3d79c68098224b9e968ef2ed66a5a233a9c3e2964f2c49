{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { FETCH_LIST, CREATE, UPDATE, FETCH, RESET } from './actionTypes';\nimport Api from '../Api';\nexport default ((resourceName, key = 'id') => ({\n  collection: (params = {}, meta = {}) => ({\n    type: FETCH_LIST,\n    promise: Api.get(resourceName, {\n      params\n    }),\n    meta: _objectSpread(_objectSpread({}, meta), {}, {\n      key,\n      resourceName\n    })\n  }),\n  member: (id, params = {}, meta = {}) => ({\n    type: FETCH,\n    promise: Api.get(`${resourceName}/${id}`, {\n      params\n    }),\n    meta: _objectSpread(_objectSpread({}, meta), {}, {\n      key,\n      resourceName\n    })\n  }),\n  create: (data, params = {}, meta = {}) => ({\n    type: CREATE,\n    promise: Api.post(resourceName, data, {\n      params\n    }),\n    meta: _objectSpread(_objectSpread({}, meta), {}, {\n      key,\n      resourceName\n    })\n  }),\n  update: (id, data, params = {}, meta = {}) => ({\n    type: UPDATE,\n    promise: Api.get(`${resourceName}/${id}`, data, {\n      params\n    }),\n    meta: _objectSpread(_objectSpread({}, meta), {}, {\n      key,\n      resourceName\n    })\n  }),\n  reset: () => ({\n    type: RESET,\n    meta: {\n      resourceName\n    }\n  })\n}));","map":null,"metadata":{},"sourceType":"module"}