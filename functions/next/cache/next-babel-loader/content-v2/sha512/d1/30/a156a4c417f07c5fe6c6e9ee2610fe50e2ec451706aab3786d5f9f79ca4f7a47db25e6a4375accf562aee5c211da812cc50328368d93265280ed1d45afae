{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport reducers from '../reducers';\nimport thunk from 'redux-thunk';\nimport notificationEffects from '../middlewares/notificationEffects'; //import {SET_TRANSACTION_LIST} from '../actions/transactionActions';\n\nimport transactionEffects from '../middlewares/transactionEffects';\nimport searchFilterEffects from '../middlewares/searchFilterEffects';\nimport routerEffecs from '../middlewares/routerEffects'; //redux-pack\n\nimport { middleware as reduxPackMiddleware } from 'redux-pack'; // const customMiddleware = store =>nextRunner => action =>{\n//     console.log('미들웨어1 액션객체',action); //nextRunner 이전 작업\n//     console.log('미들웨어1 실행전',store.getState()); //nextRunner 이전 작업 2\n//     const result = nextRunner(action);;\n//     console.log('미들웨어1 실행 후',store.getState()); //nextRunner 이후\n//     return result;\n// }\n// const customMiddleware1 = () => nextRunner => action =>{\n//     if(action.type === SET_TRANSACTION_LIST){\n//         return nextRunner({\n//             ...action,\n//             payload :[{\n//                 id : 0,\n//                 code : 'DOIT',\n//                 name : '두잇코인',\n//                 totalPrice : 100000,\n//                 currentPrice : 1111,\n//                 dateTime : '현재시간',\n//             }]\n//         })\n//     }\n//     return nextRunner(action);\n// }\n// const customMiddleware2 = store =>nextRunner => action =>{\n//     console.log('미들웨어2 액션 전달됨',action); //nextRunner 이전 작업\n//     console.log('미들웨어2 실행전',store.getState()); //nextRunner 이전 작업 2\n//     const result = nextRunner(action);;\n//     console.log('미들웨어 2 실행후',store.getState()); //nextRunner 이후\n//     return result;\n// }\n// export default initStates =>createStore(\n//     combineReducers(reducers),\n//     initStates,\n//     composeWithDevTools(),\n// )\n\nexport default (initStates => createStore(combineReducers(reducers), initStates, composeWithDevTools(applyMiddleware(thunk, reduxPackMiddleware, notificationEffects, transactionEffects, searchFilterEffects, routerEffecs))));","map":null,"metadata":{},"sourceType":"module"}