{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { SET_LOCATION } from '../actions/routerActions';\nimport { setFilter } from '../actions/searchFilterActions';\n\nfunction parse(qs) {\n  //쿼리 스트링 값을 객체로 반환함\n  const queryString = qs.substr(1);\n  const chunk = queryString.split('&');\n  return chunk.map(chunk => chunk.split(\"=\")).reduce((result, [key, value]) => _objectSpread(_objectSpread({}, result), {}, {\n    [key]: value\n  }), {});\n}\n\nexport default (store => nextRunner => action => {\n  const type = action.type,\n        payload = action.payload;\n  const result = nextRunner(action);\n\n  if (type === SET_LOCATION) {\n    //주소 동기화 액션에서만 작동\n    const _payload$location = payload.location,\n          pathname = _payload$location.pathname,\n          search = _payload$location.search;\n\n    if (pathname === '/') {\n      //경로가 일치할때만 작동\n      store.dispatch(setFilter(parse(search)));\n    }\n  }\n\n  return result;\n});","map":null,"metadata":{},"sourceType":"module"}