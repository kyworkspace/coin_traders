{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { handle } from 'redux-pack';\nimport { CREATE, UPDATE, FETCH, FETCH_LIST, RESET } from './actionTypes'; //서로 다른 데이터를 처리할때 같은 type의 액션을 사용할 것이므로 액션에서 포함시킨 meta의 resourceName과 리듀서의 이름이 \n//일치한 경우에만 리듀서 코드를 실행하도록 만듬\n\nexport default ((...reducerNames) => {\n  return reducerNames.reduce((apiReducers, name) => {\n    const initState = {\n      ids: [],\n      entities: {},\n      loadingState: {\n        [`${CREATE}/${name}`]: false,\n        [`${UPDATE}/${name}`]: false,\n        [`${FETCH}/${name}`]: false,\n        [`${FETCH_LIST}/${name}`]: false\n      },\n      errorState: {\n        [`${CREATE}/${name}`]: false,\n        [`${UPDATE}/${name}`]: false,\n        [`${FETCH}/${name}`]: false,\n        [`${FETCH_LIST}/${name}`]: false\n      },\n      pagination: {}\n    };\n\n    apiReducers[name] = (state = initState, action) => {\n      const {\n        type,\n        payload,\n        meta\n      } = action;\n      const {\n        resourceName,\n        key\n      } = meta || {};\n\n      if (resourceName !== name) {\n        return state;\n      }\n\n      switch (type) {\n        case UPDATE:\n        case FETCH:\n        case CREATE:\n        case FETCH_LIST:\n          {\n            return handle(state, action, {\n              start: prevState => _objectSpread(_objectSpread({}, prevState), {}, {\n                loadingState: _objectSpread(_objectSpread({}, prevState.loadingState), {}, {\n                  [`${type}/${name}`]: true\n                }),\n                errorState: _objectSpread(_objectSpread({}, prevState.errorState), {}, {\n                  [`${type}/${name}`]: false\n                })\n              }),\n              success: prevState => {\n                const {\n                  data\n                } = payload;\n\n                if (type === FETCH_LIST) {\n                  const {\n                    pageNumber,\n                    pageSize\n                  } = meta || {};\n                  const ids = data.map(entity => entity[key]);\n                  const entities = data.reduce((finalEntities, entity) => _objectSpread(_objectSpread({}, finalEntities), {}, {\n                    [entity[key]]: entity\n                  }), {});\n                  return _objectSpread(_objectSpread({}, prevState), {}, {\n                    ids,\n                    entities: _objectSpread(_objectSpread({}, prevState.entities), entities),\n                    loadingState: _objectSpread(_objectSpread({}, prevState.loadingState), {}, {\n                      [`${type}/${name}`]: false\n                    }),\n                    errorState: _objectSpread(_objectSpread({}, prevState.errorState), {}, {\n                      [`${type}/${name}`]: false\n                    }),\n                    pagination: {\n                      number: pageNumber,\n                      size: pageSize\n                    }\n                  });\n                } else {\n                  const id = data[key];\n                  return _objectSpread(_objectSpread({}, prevState), {}, {\n                    id,\n                    entities: _objectSpread(_objectSpread({}, prevState.entities), {}, {\n                      [id]: data\n                    }),\n                    loadingState: _objectSpread(_objectSpread({}, prevState.loadingState), {}, {\n                      [`${type}/${name}`]: false\n                    }),\n                    errorState: _objectSpread(_objectSpread({}, prevState.errorState), {}, {\n                      [`${type}/${name}`]: false\n                    })\n                  });\n                }\n              },\n              failure: prevState => {\n                const {\n                  errorMessage\n                } = payload.response ? payload.response.data : {};\n                return _objectSpread(_objectSpread({}, prevState), {}, {\n                  loadingState: _objectSpread(_objectSpread({}, prevState.loadingState), {}, {\n                    [`${type}/${name}`]: false\n                  }),\n                  errorState: _objectSpread(_objectSpread({}, prevState.errorState), {}, {\n                    [`${type}/${name}`]: errorMessage || true\n                  })\n                });\n              }\n            });\n          }\n\n        case RESET:\n          return initState;\n\n        default:\n          return state;\n      }\n    };\n\n    return apiReducers;\n  }, {});\n});","map":null,"metadata":{},"sourceType":"module"}