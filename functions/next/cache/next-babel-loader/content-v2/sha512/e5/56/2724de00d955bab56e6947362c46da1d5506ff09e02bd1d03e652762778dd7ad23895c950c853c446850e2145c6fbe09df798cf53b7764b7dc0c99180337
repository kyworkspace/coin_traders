{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { PureComponent } from \"react\";\nimport { withStyles, css, withStylesPropTypes } from \"./withStyles\";\n\nclass TableCell extends PureComponent {\n  render() {\n    const _this$props = this.props,\n          align = _this$props.align,\n          baseline = _this$props.baseline,\n          styles = _this$props.styles,\n          children = _this$props.children,\n          isHeader = _this$props.isHeader;\n    const Tag = isHeader ? \"th\" : \"td\";\n    return /*#__PURE__*/_jsx(Tag, _objectSpread(_objectSpread({}, css(styles.cell, isHeader && styles.header, !isHeader && baseline && styles.baseline, align === \"center\" && styles.alignCenter, align === \"right\" && styles.alignRight)), {}, {\n      children: children\n    }));\n  }\n\n}\n\nTableCell.defaultProps = {\n  baseline: true,\n  isHeader: false\n};\nexport default withStyles(({\n  color,\n  unit\n}) => ({\n  cell: {\n    paddingTop: unit * 4,\n    paddingBottom: unit * 4,\n    paddingRight: unit * 8,\n    paddingLeft: unit * 8,\n    backgroundColor: color.white,\n    textAlign: \"left\"\n  },\n  header: {\n    backgroundColor: color.primary,\n    color: color.white\n  },\n  baseline: {\n    borderBottom: \"1px solid \".concat(color.border)\n  },\n  alignCenter: {\n    textAlign: \"center\"\n  },\n  alignRight: {\n    textAlign: \"right\"\n  }\n}))(TableCell);","map":null,"metadata":{},"sourceType":"module"}