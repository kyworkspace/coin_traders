{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport App, { Container } from 'next/app';\nimport configureStore from '../src/store/configureStore';\nimport { Provider } from 'react-redux';\nimport ModalProvider from '../src/ModalProvider';\nimport AppLayout from '../src/components/AppLayout';\nimport NotificationContainer from '../src/containers/NotificationContainer';\nimport { StaticRouter } from 'react-router';\nimport { BrowserRouter } from 'react-router-dom';\nimport RouterStateContainer from '../src/containers/RouterStateContainer';\nconst isServer = true;\n\nclass MyApp extends App {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"store\", configureStore());\n  }\n\n  render() {\n    const {\n      Component,\n      router,\n      pageProps\n    } = this.props;\n    const Router = isServer ? StaticRouter : BrowserRouter;\n    const routerProps = isServer ? {\n      location: router.asPath\n    } : {};\n    return /*#__PURE__*/_jsx(Container, {\n      children: /*#__PURE__*/_jsx(Provider, {\n        store: this.store,\n        children: /*#__PURE__*/_jsxs(Router, _objectSpread(_objectSpread({}, routerProps), {}, {\n          children: [/*#__PURE__*/_jsx(RouterStateContainer, {}), /*#__PURE__*/_jsx(ModalProvider, {\n            children: /*#__PURE__*/_jsxs(AppLayout, {\n              children: [/*#__PURE__*/_jsx(Component, _objectSpread({}, pageProps)), /*#__PURE__*/_jsx(NotificationContainer, {})]\n            })\n          }), /*#__PURE__*/_jsx(NotificationContainer, {})]\n        }))\n      })\n    });\n  }\n\n}\n\nexport default MyApp;","map":null,"metadata":{},"sourceType":"module"}